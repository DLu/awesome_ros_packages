#!/usr/bin/python

import os.path
import collections

SRC_EXTS = ['.py', '.cpp', '.h']
CONFIG_EXTS = ['.yaml', '.rviz']
DATA_EXTS = ['.dae', '.jpg', '.stl', '.png']
MODEL_EXTS = ['.urdf', '.xacro', '.srdf']

EXTS = {'source': SRC_EXTS, 'config': CONFIG_EXTS, 'data': DATA_EXTS, 'model': MODEL_EXTS}
BASIC = ['package.xml', 'CMakeLists.txt']
SIMPLE = ['.launch', '.msg', '.srv', '.action', '.cfg']

def get_packages(root='.'):
    packages = []
    for root,dirs,files in os.walk(root):
        if '.git' in root:
            continue
        if 'package.xml' in files:
            packages.append(root)
    return packages

def match(ext):
    for name, exts in EXTS.iteritems():
        if ext in exts:
            return name
    return None

def sort_files(root, print_extras=False):
    data = collections.defaultdict(list)
    for root,dirs,files in os.walk(root):
        extras = []
        for fn in files:
            ext = os.path.splitext(fn)[-1]
            full = '%s/%s'%(root, fn)
            if fn[-1]=='~':
                continue
            ext_match = match(ext)

            if ext_match:
                data[ext_match].append(full)
            elif ext in SIMPLE:
                name = ext[1:]
                data[name].append(full)
            elif fn in BASIC:
                data[None].append(full)
            else:
                extras.append(full)
        if print_extras and len(extras)>0:
            print '  ', root
            for fn in extras:
                print '    ', fn
        

    return data

from  xml.dom.minidom import parse

class Launch:
    def __init__(self, fn):
        self.tree = parse(fn)

    def get_node_pkgs(self):
        s = set()
        for node in self.tree.getElementsByTagName('node'):
            s.add( str(node.getAttribute('pkg')) )
        return sorted(list(s))

    def get_include_pkgs(self):
        s = set()
        for node in self.tree.getElementsByTagName('include'):
            el = node.getAttribute('file') 
            if 'find' in el:
                i = el.index('find')
                i2 = el.index(')', i)
                s.add( el[i+5:i2] )
        return sorted(list(s))

    def get_dependencies(self):
        d = set()
        d.update(self.get_node_pkgs())
        d.update(self.get_include_pkgs())
        return sorted(list(d))
        
        

for package_dir in get_packages():
    package = os.path.split(package_dir)[1]
    print package
    packages = set()
    files = sort_files(package_dir)
    for launch in files['launch']:
        x = Launch(launch)
        packages.update(x.get_dependencies())
    if package in packages:
        packages.remove(package)
    print sorted(list(packages))
    print

    
